/**
 * Represents the parameters for a standard motion primitive.
 */
export interface PrimitiveParameters {
  [key: string]: string | number | boolean; // Existing flexible parameters
}

/**
 * Represents a standard motion primitive step (non-blended).
 */
export interface PrimitiveStep {
  type: string; // e.g., 'dolly', 'orbit', 'static', etc. (but not 'blend')
  parameters: PrimitiveParameters;
  duration_ratio: number;
}

/**
 * Represents a primitive step nested inside a blend step.
 * It excludes duration_ratio as that's defined at the blend level.
 */
export interface NestedPrimitiveStep {
  type: string; // e.g., 'dolly', 'orbit', etc. (but not 'blend')
  parameters: PrimitiveParameters;
}

/**
 * Represents the parameters specific to a blend step.
 */
export interface BlendParameters {
  easing?: string; // Optional easing for the whole blend
  steps: NestedPrimitiveStep[]; // Array of primitives to run concurrently
}

/**
 * Represents a concurrent blend step.
 */
export interface BlendStep {
  type: 'blend';
  parameters: BlendParameters;
  duration_ratio: number; // Duration for the entire blend segment
}

/**
 * Represents a single step within a motion plan,
 * which can be either a standard primitive or a concurrent blend.
 */
export type MotionStep = PrimitiveStep | BlendStep;

/**
 * Represents the overall structured motion plan generated by an LLM Assistant/Agent.
 * This serves as the input for the Scene Interpreter.
 */
export interface MotionPlan {
  /**
   * An ordered list of motion steps to be executed sequentially.
   */
  steps: MotionStep[];

  /**
   * Optional: Extra information about the overall plan.
   */
  metadata?: {
    /**
     * The total duration (in seconds) the user originally requested or inferred.
     * Helps the Scene Interpreter scale the duration_ratios correctly.
     * If not provided, the interpreter might use a default duration or sum step durations differently.
     */
    requested_duration?: number;

    /**
     * Optional: The original user prompt, potentially useful for debugging.
     */
    original_prompt?: string;

    // Add other metadata as needed
  };
}

/**
 * Interface for a service responsible for generating a structured MotionPlan
 * from a user prompt, interacting with an underlying AI provider (e.g., OpenAI Assistant).
 */
export interface MotionPlannerService {
  /**
   * Generates a structured motion plan based on the user's natural language prompt.
   * @param userPrompt The natural language prompt from the user.
   * @param requestedDuration Optional total duration hint in seconds.
   * @returns A Promise resolving to the structured MotionPlan.
   * @throws Error if the plan generation fails or the response is invalid.
   */
  generatePlan(userPrompt: string, requestedDuration?: number): Promise<MotionPlan>;

  /**
   * Optional: Validates the configuration and connectivity with the underlying AI provider.
   * @returns A Promise resolving to true if the configuration is valid, false otherwise.
   */
  validateConfiguration?(): Promise<boolean>;

  /**
   * Optional: Gets capabilities or information about the underlying provider.
   */
  getCapabilities?(): Promise<Record<string, any>>; // Define a more specific type if needed

  // Add other methods as needed (e.g., managing specific provider resources like threads)
}

/**
 * Defines the types of motion planning providers we might support.
 */
export type MotionProviderType = 'openai-assistant' | 'vertex-ai-agent' | 'mock'; // Add others as needed

/**
 * Base configuration expected for any motion planning provider adapter.
 */
export interface BaseMotionProviderConfig {
    type: MotionProviderType;
    // Add common config properties here (e.g., default timeout)
}

/**
 * Configuration specific to the OpenAI Assistant provider.
 */
export interface OpenAIAssistantProviderConfig extends BaseMotionProviderConfig {
    type: 'openai-assistant';
    apiKey: string;
    assistantId: string;
    // Optional: Specify KB file IDs if not automatically handled by the assistant's retrieval tool
    // knowledgeBaseFileIds?: string[];
    pollingIntervalMs?: number; // How often to check run status
    timeoutMs?: number; // Max time to wait for a run to complete
}

// Add configurations for other providers (VertexAI, Mock) as needed. 