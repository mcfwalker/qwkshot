/**
 * @file Defines the core types and interfaces for the Motion Planner service,
 * including the structured plan generated by the AI and the service interface itself.
 */

// Structure for a Single Step in the Plan
export interface MotionStep {
  /**
   * Identifies the type of camera motion for this step.
   * This MUST match a 'name' defined in our Motion Knowledge Base (KB).
   * Examples: "zoom", "orbit", "pan", "static", "fly_by"
   */
  type: string;

  /**
   * Contains the specific settings for this motion step.
   * The keys and expected value types inside this object will depend
   * on the 'type' of motion and should be defined in the Motion KB.
   * Examples:
   *   For "zoom": { "target": "object_center", "factor": 0.5, "speed": "fast" }
   *   For "orbit": { "direction": "clockwise", "axis": "y", "angle": 90, "speed": "medium" }
   *   For "static": {} (might have no parameters, just holds position)
   */
  parameters: {
    [key: string]: string | number | boolean; // Allows string, number, or boolean values
  };

  /**
   * Specifies what proportion of the total animation duration
   * this step should take (value between 0.0 and 1.0).
   * The Scene Interpreter will calculate the actual duration for this step
   * based on this ratio and the total requested_duration from the metadata.
   * All ratios in the plan should ideally sum to 1.0.
   */
  duration_ratio: number;
}

// Overall Plan Structure (Output from MotionPlannerService)
export interface MotionPlan {
  /**
   * An ordered list of motion steps. The Scene Interpreter will
   * execute these steps one after the other.
   */
  steps: MotionStep[];

  /**
   * Optional: Extra information about the overall plan.
   */
  metadata?: {
    /**
     * The total duration (in seconds) the user originally requested.
     * Helps the Scene Interpreter scale the duration_ratios correctly.
     */
    requested_duration: number;
    // Add other metadata as needed (e.g., original prompt for debugging, confidence score?)
  };

  /**
   * Optional: Any error encountered during plan generation.
   * If this is present, the 'steps' might be empty or incomplete.
   */
  error?: {
      code: string; // e.g., 'PLANNING_FAILED', 'KB_ERROR', 'PROVIDER_ERROR'
      message: string;
  };
}

// Interface for the Motion Planner Service Adapter
export interface MotionPlannerService {
    /**
     * Takes a user prompt and returns a structured motion plan.
     * Handles all interaction with the underlying AI provider and its KB.
     *
     * @param userPrompt The natural language prompt from the user.
     * @param requestedDuration The total duration requested by the user.
     * @returns A Promise resolving to the structured MotionPlan.
     */
    generateMotionPlan(userPrompt: string, requestedDuration: number): Promise<MotionPlan>;
  } 