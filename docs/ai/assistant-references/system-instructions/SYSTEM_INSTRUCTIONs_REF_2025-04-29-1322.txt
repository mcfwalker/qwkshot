# Status Report: Visual Roll Implementation Attempt & Findings

**Date:** 2025-04-29 (Use actual date when saving)
**Report ID:** M3DV-SR-YYYY-MM-DD-HHMM-RollAttempt (Replace timestamp)

## Session Overview
- **Focus Area(s):** Implement the visual effect for the `rotate` primitive with `axis: 'roll'`. Debug persistent issues with camera orientation being overridden by standard camera control libraries (`<OrbitControls>`, `<CameraControls>`).
- **Initial Implementation:**
    - Updated `CameraCommand` type with optional `orientation` field.
    - Updated API route to serialize `orientation`.
    - Implemented quaternion math in `SceneInterpreter` to calculate correct start/end orientations for roll commands.
    - Updated `AnimationController` to receive orientation data and apply it using SLERP and direct `camera.quaternion` updates.
- **Problem Encountered: `<OrbitControls>` Override:**
    - Initial tests showed no visual roll despite correct backend data. Diagnosis pointed to `<OrbitControls>` overriding manual quaternion updates.
    - **Attempt 1: `enabled` Prop:** Setting `enabled={false}` on `<OrbitControls>` during animation did not prevent the override.
    - **Attempt 2: Conditional Rendering:** Conditionally unmounting `<OrbitControls>` during animation caused `controlsRef` to become null, breaking other components relying on the ref (`CameraAnimationSystem`). Null checks were added but the underlying timing issue likely remained.
    - **Attempt 3: Patching `controls.update()`:** Temporarily replacing the `controls.update` method via `useEffect` and state also failed to reliably prevent the override, likely due to React/R3F lifecycle timing issues.
    - **Attempt 4: Euler Hack:** Setting `camera.rotation.order = 'YXZ'` and manually setting `camera.rotation.z` after `camera.lookAt()` was attempted. While the correct Euler angle was calculated, console logs showed it being reset to near-zero immediately, indicating `OrbitControls` still overrode the change even when `enabled=false`.
- **Research & Feedback:** External research and feedback confirmed that `OrbitControls` is fundamentally designed to maintain an upright camera and overrides external orientation changes, making manual roll difficult and potentially requiring hacks.
- **Pivot to `<CameraControls />`:**
    - Replaced `<OrbitControls>` with `<CameraControls>` from Drei, refactoring `Viewer.tsx` and associated components (`AnimationController`, `CameraTelemetry`, `CameraAnimationSystem`).
    - Refactored `AnimationController` to use the `camera-controls` async API (`setLookAt`, `smoothTime`).
    - **Attempt 5: `camera.up` Manipulation:** Investigated `camera-controls` API. As direct roll/quaternion setting is unavailable, attempted manipulating `camera.up` based on the target orientation and calling `controls.updateCameraUp()`. This also failed to produce the desired visual roll, likely due to the library's internal state management prioritizing its calculated orientation based on target/position/azimuth/polar angles over the hinted `up` vector during transitions.
- **Independent Fixes Made:**
    - Enhanced `OpenAIAssistantAdapter` JSON parsing to strip comments.
    - Added a null check for `controlsRef` in `CameraAnimationSystem`.
- **Conclusion & Decision:**
    - Achieving reliable, smooth visual roll via direct camera manipulation is fundamentally incompatible with both `<OrbitControls>` and the standard usage patterns of `<CameraControls>` due to their internal state management and orientation overrides.
    - The Euler Hack is too fragile. Manipulating the `up` vector in `<CameraControls>` was ineffective for roll.
    - **Decision:** Abandon attempts to implement visual roll *on this branch*. Revert to `main` or a stable commit. Implement graceful handling for 'roll' prompts in the interpreter (treat as static or log warning) for now. The independent fixes (JSON parsing, null check) should be reapplied to the main development line. Future implementation of visual roll might require switching fully to a different control library (e.g., `<TrackballControls>`) or waiting for enhanced features in `<CameraControls>`.

## Technical Updates During Attempt
- *(List relevant file changes from previous status report M3DV-SR-2025-04-29-1029-RollPivot, plus the CameraControls related changes/reverts)*

## Challenges & Blockers
- **Control Library Conflict:** The core blocker was the inability to prevent `<OrbitControls>` or `<CameraControls>` (when using `setLookAt`) from overriding manual orientation changes (`quaternion` or `rotation.z`) needed for roll, even when disabled or using workarounds.

## Next Steps (Post-Abandonment)
1.  Checkout `main` branch.
2.  Create a new branch (e.g., `fix/roll-graceful-fail` or `feat/post-roll-fixes`).
3.  Re-apply the JSON parsing fix to `OpenAIAssistantAdapter`.
4.  Re-apply the `controlsRef` null check to `CameraAnimationSystem` (or verify if still needed depending on `main`'s state).
5.  Modify `SceneInterpreter` to handle `axis: 'roll'` gracefully (e.g., treat as static, log warning).
6.  Update documentation (System Instructions, KB, Technical Design) to reflect that roll is not visually supported.